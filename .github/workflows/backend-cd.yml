# .github/workflows/backend-cd.yml

name: Backend CD - Deploy Backend to AKS

on:
  push:
    branches:
      - main

  workflow_call:
    outputs:
      USER_API_IP:
        description: User service external IP
        value: ${{ jobs.deploy_backend.outputs.USER_API_IP }}
      SONG_API_IP:
        description: Song service external IP
        value: ${{ jobs.deploy_backend.outputs.SONG_API_IP }}
      PLAYLIST_API_IP:
        description: Playlist service external IP
        value: ${{ jobs.deploy_backend.outputs.PLAYLIST_API_IP }}

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      USER_API_IP: ${{ steps.get_user_ip.outputs.external_ip }}
      SONG_API_IP: ${{ steps.get_song_ip.outputs.external_ip }}
      PLAYLIST_API_IP: ${{ steps.get_playlist_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Deploy Backend to Production
        run: |
          kubectl apply -f k8s/configmaps.yaml -n production
          kubectl apply -f k8s/secrets.yaml -n production
          kubectl apply -f k8s/rabbitmq.yaml -n production
          kubectl apply -f k8s/user-db.yaml -n production
          kubectl apply -f k8s/song-db.yaml -n production
          kubectl apply -f k8s/playlist-db.yaml -n production
          kubectl apply -f k8s/user-service.yaml -n production
          kubectl apply -f k8s/song-service.yaml -n production
          kubectl apply -f k8s/playlist-service.yaml -n production

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for User, Song, Playlist LoadBalancer IPs (up to 5 minutes)..."
          USER_IP=""
          SONG_IP=""
          PLAYLIST_IP=""
          
          for i in $(seq 1 60); do
            echo "Attempt $i/60..."
            USER_IP=$(kubectl get service user-service-aks -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            SONG_IP=$(kubectl get service song-service-aks -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            PLAYLIST_IP=$(kubectl get service playlist-service-aks -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$USER_IP" && -n "$SONG_IP" && -n "$PLAYLIST_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "User Service IP: $USER_IP"
              echo "Song Service IP: $SONG_IP"
              echo "Playlist Service IP: $PLAYLIST_IP"
              break
            fi
            sleep 5
          done

          if [[ -z "$USER_IP" || -z "$SONG_IP" || -z "$PLAYLIST_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1
          fi

          echo "USER_IP=$USER_IP" >> $GITHUB_ENV
          echo "SONG_IP=$SONG_IP" >> $GITHUB_ENV
          echo "PLAYLIST_IP=$PLAYLIST_IP" >> $GITHUB_ENV

      - name: Capture User Service IP
        id: get_user_ip
        run: echo "external_ip=${{ env.USER_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Song Service IP
        id: get_song_ip
        run: echo "external_ip=${{ env.SONG_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Playlist Service IP
        id: get_playlist_ip
        run: echo "external_ip=${{ env.PLAYLIST_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
        if: always()