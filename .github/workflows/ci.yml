# .github/workflows/ci.yml

name: CI - Test, Build, and Push Images to ACR

on:
  push:
    branches:
      - testing
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'

jobs:
  test_backends:
    runs-on: ubuntu-latest
    
    services:
      user_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: userdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      song_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: songdb
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      playlist_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: playlistdb
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/backend/user_service" >> $GITHUB_ENV

      - name: Run user_service tests
        working-directory: backend/user_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: userdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PYTHONPATH: .
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run song_service tests
        working-directory: backend/song_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: songdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PYTHONPATH: .
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run playlist_service tests
        working-directory: backend/playlist_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: playlistdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PYTHONPATH: .
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_backends
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.13.3

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="resource_group_name=music-rg" \
            -backend-config="storage_account_name=mimusicstorage" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Apply
        id: terraform
        run: |
          cd terraform
          terraform apply -auto-approve
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server | tr -d '\n' | sed 's/[^a-zA-Z0-9.-]//g')
          AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name | tr -d '\n' | sed 's/[^a-zA-Z0-9.-]//g')
          AKS_RESOURCE_GROUP=$(terraform output -raw resource_group_name | tr -d '\n' | sed 's/[^a-zA-Z0-9.-]//g')
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "AKS_RESOURCE_GROUP=$AKS_RESOURCE_GROUP" >> $GITHUB_ENV

      - name: Verify Terraform Outputs
        run: |
          echo "ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}"
          echo "AKS_CLUSTER_NAME: ${{ env.AKS_CLUSTER_NAME }}"
          echo "AKS_RESOURCE_GROUP: ${{ env.AKS_RESOURCE_GROUP }}"
          if [ -z "${{ env.ACR_LOGIN_SERVER }}" ]; then
            echo "Error: ACR_LOGIN_SERVER is empty"
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build service images
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/user-service:latest ./backend/user_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/song-service:latest ./backend/song_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/playlist-service:latest ./backend/playlist_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/

      - name: Push service images to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/user-service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/song-service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/playlist-service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest